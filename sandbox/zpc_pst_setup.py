import sys 
import os 
import pandas as pd
import numpy as np

# pyemu and adeqwat modules should be placed in ~/Programmes/python/

# https://github.com/jtwhite79/pyemu
sys.path.append(os.path.expanduser('~/Programmes/python/pyemu/'))
import pyemu

# https://github.com/apryet/adeqwat
sys.path.append(os.path.expanduser('~/Programmes/python/adeqwat/'))
from pymarthe import * 

# -----------------------------------
# -------- STEP 1 : setup -----------
# -----------------------------------

# GO TO MONA WORKING DIRECTORY
# load existing Marthe model
mm = MartheModel('./mona.rma')

# --- Parameters ---

# add new parameter 
mm.add_param('kepon',1e-6)

# set initial values
# layer-based parameter assignation
values = {0: 1.5e-5, 1: 2.3e-4}
mm.param['kepon'].set_zpc_values(values)

# write template file and initial parameter input file
for parname in list(mm.param.keys()):
    mm.param[parname].write_zpc_tpl()
    mm.param[parname].write_zpc_data()


# --- Observations ---

# observation files (generated by obs_pproc.py)
obs_dir = os.path.join(mm.mldir,'obs','')
obs_files = [os.path.join(obs_dir, f) for f in os.listdir( obs_dir ) if f.endswith(".dat")]

# add observations
for obs_file in obs_files :
    mm.add_obs(obs_file = obs_file)

# write instruction files
for obs_loc in mm.obs.keys() : 
    mm.obs[obs_loc].write_ins()

# -- PEST files setup ---

# template files
tpl_dir = os.path.join('.','tpl')
tpl_files = [os.path.join(tpl_dir, f) for f in os.listdir( tpl_dir ) if f.endswith(".tpl")]

# input parameter files 
par_dir = os.path.join('.','param')
par_files = [os.path.join(par_dir, f) for f in os.listdir( par_dir ) if f.endswith(".dat")]

# instruction files 
ins_dir = os.path.join('.','ins')
ins_files = [os.path.join(ins_dir, f) for f in os.listdir( ins_dir ) if f.endswith(".ins")]


# output simulation files 
sim_dir = os.path.join('.','sim')
sim_files = [os.path.join(sim_dir, f) for f in os.listdir( sim_dir ) if (f.endswith(".dat")) and (f in os.listdir(obs_dir)) ]


# set up pst file
pst = pyemu.helpers.pst_from_io_files(tpl_files, par_files, ins_files, sim_files)

# set observation values and weights in the pst
for obs_loc in list(mm.obs.keys()):
    pst.observation_data.loc[mm.obs[obs_loc].df.index,'obsval'] = mm.obs[obs_loc].df.value
    pst.observation_data.loc[mm.obs[obs_loc].df.index,'weight'] = mm.obs[obs_loc].df.weight
    pst.observation_data.loc[mm.obs[obs_loc].df.index,'obgnme'] = obs_loc

# set parameter value and group
for param in list(mm.param.keys()):
    pst.parameter_data.loc[ mm.param[param].zpc_df.index , "parval1"] = mm.param['kepon'].zpc_df.value
    pst.parameter_data.loc[ mm.param[param].zpc_df.index , "pargp"] = param

# write pst 
pst.parameter_data.loc['kepon_l01_zpc01','partrans'] = 'fixed'
pst.parameter_data.loc['kepon_l01_zpc01',"parlbnd"]  = 0.

#pyemu.utils.helpers.zero_order_tikhonov(pst,par_groups=["drn_cond"])

# write pst 
pst.write(mm.mlname + '.pst')


