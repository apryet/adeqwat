import sys 
import os 
import pandas as pd
import numpy as np

# pyemu and adeqwat modules should be placed in ~/Programmes/python/

# https://github.com/jtwhite79/pyemu
sys.path.append(os.path.expanduser('~/Programmes/python/pyemu/'))
import pyemu

# https://github.com/apryet/adeqwat
sys.path.append(os.path.expanduser('~/Programmes/python/adeqwat/'))
from pymarthe import * 

# ---------------------------------------------------------------
# -------- STEP 1 : import prior data from excel file -----------
# ---------------------------------------------------------------

# set initial values
# layer-based parameter assignation
xls = pd.ExcelFile('./param.xlsx')
df_kepon = pd.read_excel(xls, 'kepon')
df_permh = pd.read_excel(xls, 'permh')
df_Ss = pd.read_excel(xls, 'Ss')
df_w  = pd.read_excel(xls, 'w')


prior_data_dic = {}
dic_kepon = {}
dic_permh = {}
dic_emmca = {}
dic_emmli = {}

dic_kepon['parval1'] = df_kepon.Dmoy.to_dict()
dic_permh['parval1'] = df_permh.moyk.to_dict()
dic_emmca['parval1'] = df_Ss.MoySs.to_dict()
dic_emmli['parval1'] = df_w.Wmoy.to_dict()

dic_kepon['parlbnd'] = df_kepon.Dmin.to_dict()
dic_permh['parlbnd'] = df_permh.kmin.to_dict()
dic_emmca['parlbnd'] = df_Ss.Ssmin.to_dict()
dic_emmli['parlbnd'] = df_w.Wmin.to_dict()

dic_kepon['parubnd'] = df_kepon.Dmax.to_dict()
dic_permh['parubnd'] = df_permh.kmax.to_dict()
dic_emmca['parubnd'] = df_Ss.Ssmax.to_dict()
dic_emmli['parubnd'] = df_w.Wmax.to_dict()

prior_data_dic['kepon'] = dic_kepon
prior_data_dic['emmli'] = dic_emmli
prior_data_dic['emmca'] = dic_emmca
prior_data_dic['permh'] = dic_permh

# --------------------------------------------------------------
# -------- STEP 2 : PyMarthe pre-processing for PEST -----------
# --------------------------------------------------------------

# clear output folders

tpl_dir = os.path.join('.','tpl')
par_dir = os.path.join('.','param')
ins_dir = os.path.join('.','ins')
sim_dir = os.path.join('.','sim')

l = [ os.remove(os.path.join(tpl_dir,f)) for f in os.listdir(tpl_dir) if f.endswith(".tpl") ]
l = [ os.remove(os.path.join(par_dir,f)) for f in os.listdir(par_dir) if f.endswith(".dat") ]
l = [ os.remove(os.path.join(ins_dir,f)) for f in os.listdir(ins_dir) if f.endswith(".ins") ]

# GO TO MONA WORKING DIRECTORY
# load existing Marthe model
mm = MartheModel('./mona.rma')

# --- Parameters ---

# set parameter list 
params = ['kepon','permh','emmca','emmli']

log_transform_dic = {'kepon': True,'permh': True,'emmca' : True,'emmli': False}

# process parameters with PyMarthe 
for param in params :
    print(param)
    # add new parameter
    mm.add_param(param,log_transform=log_transform_dic[param])
    # set initial values from prior information
    mm.param[param].set_zpc_values(prior_data_dic[param]['parval1'])
    print(prior_data_dic[param]['parval1'])
    # write template file
    mm.param[param].write_zpc_tpl()
    # write initial parameter value files
    mm.param[param].write_zpc_data()

# --- Observations ---
# observation files (generated by obs_pproc.py)
obs_dir = os.path.join(mm.mldir,'obs','')

# NOTE : added sorted() to match with sorted list of sim files
obs_files = [os.path.join(obs_dir, f) for f in sorted(os.listdir( obs_dir )) if f.endswith('.dat')]

# add observations
for obs_file in obs_files :
    mm.add_obs(obs_file = obs_file)

# write instruction files
for obs_loc in mm.obs.keys() :
    mm.obs[obs_loc].write_ins()

# -------------------------------------------------------------
# ----------- STEP 3: PyEMU pre-processing for PEST ------------
# -------------------------------------------------------------

# NOTE : added sorted() to file lists to match with each others 

# template files
tpl_files = [os.path.join(tpl_dir, f) for f in sorted(os.listdir( tpl_dir )) if f.endswith('.tpl')]

# input parameter files 
par_files = [os.path.join(par_dir, f) for f in sorted(os.listdir( par_dir )) if f.endswith('.dat')]

# instruction files 
ins_files = [os.path.join(ins_dir, f) for f in sorted(os.listdir( ins_dir )) if f.endswith('.ins')]

# output simulation files 
sim_files = [os.path.join(sim_dir, f + '.dat') for f in sorted(list(mm.obs.keys()))  ]

# set up pst file
pst = pyemu.helpers.pst_from_io_files(tpl_files, par_files, ins_files, sim_files)

# set observation values and weights in the pst
for obs_loc in list(mm.obs.keys()):
    pst.observation_data.loc[mm.obs[obs_loc].df.index,'obsval'] = mm.obs[obs_loc].df.value
    pst.observation_data.loc[mm.obs[obs_loc].df.index,'weight'] = mm.obs[obs_loc].df.weight
    pst.observation_data.loc[mm.obs[obs_loc].df.index,'obgnme'] = obs_loc

for stat in ['parlbnd','parval1','parubnd']:
    for partype in list(prior_data_dic.keys()):
        pst.parameter_data.loc[ mm.param[partype].zpc_df.index , 'pargp'] = partype
        for lay in range(mm.nlay):
            parname = '{0}_l{1:02d}_zpc{2:02d}'.format(partype,lay+1,1)
            val = prior_data_dic[partype][stat][lay]
            # log-transform values if necessary
            if log_transform_dic[partype] == True : 
                pst.parameter_data.loc[ parname , stat] = np.log10(val)
            else : 
                pst.parameter_data.loc[ parname , stat] = val


# update parameter_groups from parameter_data 
pst.rectify_pgroups()

#For GLM
#pst.parameter_data.loc[ pst.parameter_data['pargp'] == 'emmli' , 'parubnd'] = 2
#pst.parameter_data.loc[ pst.parameter_data['pargp'] == 'emmca' , 'parubnd'] = 2
#pst.parameter_data.loc[ pst.parameter_data['pargp'] == 'kepon' , 'parlbnd'] = 10**(-20)

#pst.parameter_data.loc[ pst.parameter_data['pargp'] == 'emmli' , 'partrans'] = 'none'

#To avoid problems with jactest
pst.parameter_data['partrans'] = 'none'

# first layer unconfined, no need to adjust kepon value
pst.parameter_data.loc['kepon_l01_zpc01','partrans'] = 'fixed'
pst.parameter_data.loc['kepon_l01_zpc01','parlbnd']  = 0.

# Zero-order Tikhonov reg
pyemu.utils.helpers.zero_order_tikhonov(pst)
pst.prior_information.head()

# derivative calculation type 
pst.parameter_groups.loc[ pst.parameter_groups.index,'forcen'] = 'always_3'
pst.parameter_groups.loc[ pst.parameter_groups.index,'derinc'] = 0.02
#pst.parameter_groups.loc[ pst.parameter_groups.index,'dermthd'] = 'minvar'
pst.parameter_groups.loc[ pst.parameter_groups.index,'derincmul'] = 1.0

# pestpp-glm options 
pst.pestpp_options['svd_pack'] = 'propack'
pst.pestpp_options['lambdas'] = str(list(np.power(10,np.linspace(-2,3,10)))).strip('[]')
#pst.pestpp_options['lambda_scale_fac'] = str([0.9, 0.8, 0.7, 0.5]).strip('[]')

#pestpp ies options
#pst.pestpp_options['ies_num_reals'] = '100'
#pst.pestpp_options['ies_subset_size'] = '5'


# (re)write pst 
pst.write(mm.mlname + '_jactest_zpc.pst')

